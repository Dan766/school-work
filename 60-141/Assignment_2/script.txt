Script started on Sun 15 Feb 2015 06:19:03 PM EST
fontana1@charlie:~$ cc[Kat assign2.c

#include <stdio.h>

#define final_path 'X'	 	//Final solution path

#define possible_path '/'	//Propossible/mid-generation pathways in Maze

#define open_path '0'		//Open pathways in Maze

#define maze_r 12			//Maze rows

#define maze_c 12			//Maze Columns 

void findStart(char [maze_r][maze_c], int []);		//function used to find the starting coords of the maze

void mazeTraversal(char[maze_r][maze_c],char[maze_r][maze_c], int [], char); //Function used to follow the given path generated in generatepath()

int generatepath(char[maze_r][maze_c],int [], char);	//Function used to generate a path through the maze

int backtrack(char[maze_r][maze_c], int [], char);	//Function used to 'backtrack' out of a corner when stuck

int validMove(char[maze_r][maze_c],int[]);			//Function used to find how many valid moved, if any, can be made from a given pos

int coordsAreEdge(int []);						//Function used to see if a given pos is the exit 

void printMaze(char[maze_r][maze_c]);					//Function used to print the maze

//Main function

int main (void)

{

	int r,c,pos[2]={0,0};

	char dir='N', path[maze_r][maze_c], maze[maze_r][maze_c]={

			   {'1','1','1','1','1','1','1','1','1','1','1','1'},

			   {'1','0','0','0','1','0','0','0','0','0','0','1'},

			   {'0','0','1','0','1','0','1','1','1','1','0','1'},

			   {'1','1','1','0','1','0','0','0','0','1','0','1'},

			   {'1','0','0','0','0','1','1','1','0','1','0','0'},

			   {'1','1','1','1','0','1','0','1','0','1','0','1'},

			   {'1','0','0','1','0','1','0','1','0','1','0','1'},

			   {'1','1','0','1','0','1','0','1','0','1','0','1'},

			   {'1','0','0','0','0','0','0','0','0','1','0','1'},

			   {'1','1','1','1','1','1','0','1','1','1','0','1'},

			   {'1','0','0','0','0','0','0','1','0','0','0','1'},

			   {'1','1','1','1','1','1','1','1','1','1','1','1'} };

	//Generates a second maze called 'path' used to generate a path

	for (r=0;r<maze_r;r++){

		for(c=0;c<maze_c;c++)

			path[r][c]= maze[r][c]; }

	//Welcomes user and tells them what the 0's 1's and X's mean

	printf("\nWelcome to Maze Traversal: Assignment 2\n");

	printf("\nTip:\n");

	printf("\t'1' = Wall     \n");

	printf("\t'0' = Open Path \n");

	printf("\t'X' = Your Location   \n\n");

	//Finds starting coords and generates a path to the exit

	findStart(maze,pos);	

	generatepath(path,pos,dir);

	//Finds starting coords again and follows the path already generated to the exit

	findStart(maze,pos);	

	mazeTraversal(maze,path,pos,dir);

	//Prints the maze solution in a easy to read form

	printf("Maze Solution:\n");

	printMaze(maze);

}

/*

	Objective: The Objective of the find start function is to find and return the 

		starting coords of maze by looking along the first column for a open space

		('0' AKA open_path)

	Input: Input of this function is a 1D int array called pos[] and char maze[][]

		int pos[]

			-> A 1D int array representing the current x,y position in the maze

		char maze[maze_r][maze_c]

			-> maze function is used to hold the final maze solution path 

	Output: The output of the function is the x,y position of the maze entrance.

*/

void findStart(char maze[maze_r][maze_c],int pos[])

{

	int new;

	pos[0]=0;

	//Looks along the first column for a '0' aka open_path

	for(pos[1]=0;pos[1]<maze_r;pos[1]++)

	{

		if (maze[pos[1]] [pos[0]]==open_path)

		{

			return;

		}

		else

			pos[1]+=1;

	}

		

}

/*

	Objective: The Objective of the generatepath function is to generate a path going from the

		start of the maze to the exit and represent it used '/' chars AKA possible_path

	Input: Input of this function is a 1D int array called pos[] the char path[][] array 

			as well as char dir

		int pos[]

			-> A 1D int array representing the current x,y position in the maze

		char path[maze_r][maze_c]

			-> path array is used to hold the proposed solution path for the maze function

		char dir

			-> dir will hold the current direction of travel. ie 'N'

	Output: The Output of this function is the solution for the proposed path of the solution

			given in the path[][] array. The path is shown using '/' AKA possible_path

*/

int generatepath(char path[maze_r][maze_c],int pos[], char dir)

{

	int r,c,ran;

	path[pos[1]] [pos[0]] = possible_path;

	if (coordsAreEdge(pos)) //Function exits if the exit is found

		return 0;

	switch (dir)

	{

		case 'N':

			if(path[pos[1]-1][pos[0]]==open_path) //If you can go North, position is moved

				pos[1]-=1;

			else

				dir='S';

			break;

		case 'E':

			if (path[pos[1]][pos[0]+1]==open_path) //If you can go East, position is moved

				pos[0]+=1;

			else

				dir='W';

			break;

		case 'S':

			if (path[pos[1]+1][pos[0]]==open_path) //If you can go South, position is moved

				pos[1]+=1;

			else

				dir='E';

			break;

		case 'W':

			if (path[pos[1]][pos[0]-1]==open_path) //If you can go West, position is moved

				pos[0]-=1;

			else

				dir='N';

			break;

	}

	//If you get stuck in a corner, then backtrack function will move you back to an intersection

	//and then try a different random direction

	if (validMove(path,pos)==0)

	{

		backtrack(path,pos,dir);

		ran =(rand()%4);

		if (ran==1)

			dir='N';

		else if (ran==2)

			dir='S';

		else if (ran==3)

			dir='W';

		else 

			dir='E';

	}

	generatepath(path,pos,dir); //Makes the recursive call

}

/*

	Objective: The Objective of the mazeTraversal function is to follow the path

		from the enterence of the maze located in the char maze[][] function to the

		exit of the maze using a pre generated path given in the char path[][] array

		and display the current move as traversal is processing. 

	Input: Input of this function is a 1D int array called pos[] the char path[][] array 

			the char maze[][] as well as char dir

		int pos[]

			-> A 1D int array representing the current x,y position in the maze

		char path[maze_r][maze_c]

			-> path array is used to hold the proposed solution path for the maze function

		char maze[maze_r][maze_c]

			-> maze function is used to hold the final maze solution path 

		char dir

			-> dir will hold the current direction of travel. ie 'N'

	Output: The Output of this function is the maze solution given in the char maze[][] array

			the solution path is shown using 'X' AKA final_path

*/

void mazeTraversal(char maze[maze_r][maze_c],char path[maze_r][maze_c],int pos[], char dir)

{

	if (coordsAreEdge(pos)) //If the exit is found the function will exit and print the maze one last time

		return;

	switch (dir)

	{

		case 'N':

			if(path[pos[1]-1][pos[0]]==possible_path) //If you can go North, position is moved

			{

				pos[1]-=1;

				printMaze(maze);

			}

			else

				dir='S';

			break;

		case 'E':

			if (path[pos[1]][pos[0]+1]==possible_path) //If you can go East, position is moved

			{

				pos[0]+=1;

				printMaze(maze);

			}

			else

				dir='W';

			break;

		case 'S':

			if (path[pos[1]+1][pos[0]]==possible_path) //If you can go South, position is moved

			{

				pos[1]+=1;

				printMaze(maze);

			}

			else

				dir='E';

			break;

		case 'W':

			if (path[pos[1]][pos[0]-1]==possible_path) //If you can go West, position is moved

			{

				pos[0]-=1;

				printMaze(maze);

			}

			else

				dir='N';

			break;

	}

	path[pos[1]][pos[0]] = final_path; //Places a 'X' aka final_path

	maze[pos[1]][pos[0]] = final_path; // on the current x,y of path and maze

	mazeTraversal(maze,path,pos,dir); //Makes recursive call

}

/*

	Objective: The Objective of the validMove function is to find how many possible 

		directions you can go from a given x,y position and return that number. 

		1 means that there is only one possible path, 0 means you are stuck in a corner

		and 2 means you are at an interection. 

	Input: Input of this function is a 1D int array called pos[] and the the char

			path[][] array 

		int pos[]

			-> A 1D int array representing the current x,y position in the maze

		char path[maze_r][maze_c]

			-> path array is used to hold the proposed solution path for the maze function

	Output: The Output of this function is a interger number representing the # of possible

			pathways that can be travelled. 0 means none, 1 is 1 and 2 means there are multiple. 

*/

int validMove(char path[maze_r][maze_c],int pos[])

{

	int c;

	c=0;

	if (coordsAreEdge(pos)) return 1; //If the next move is at edge then return valid move

	if (path[pos[1]-1][pos[0]]==open_path) c+=1; //For each possible move

	if (path[pos[1]+1][pos[0]]==open_path) c+=1; //		that can be made, add

	if (path[pos[1]][pos[0]-1]==open_path) c+=1; //	 	one to the counter

	if (path[pos[1]][pos[0]+1]==open_path) c+=1; //	 	called c

	if (c==0) return 0; 	//return 0 if no direction is valid

	else if (c==1) return 1;//return 1 if only 1 direction is valid	

	else return 2;			//return 2 if multiple moves are valid (intersection)

}

/*

	Objective: The Objective of the backtrack function is to 'backtrack' the path array

			to an intersection from a given position whenever said position hits a dead end. 

	Input: Input of this function is a 1D int array called pos[], the path[][] array

		as well as a char array called 'dir' which holds the current direction

		int pos[]

			-> A 1D int array representing the current x,y position in the maze

		char path[maze_r][maze_c]

			-> path array is used to hold the proposed solution path for the maze function

		char dir

			-> the current direction ie. 'N' 

	Output: The Output of this function is a modified version of the 'path' array.

			It will erase all 'possible_path' chars from each location started from 

			the current position going back to the nearest intersection

		char path[maze_r][maze_c]

			-> path array is used to hold the proposed solution path for the maze function

*/

int backtrack(char path[maze_r][maze_c],int pos[], char dir)

{

	switch(dir)

	{

		case 'N':

			if(path[pos[1]-1][pos[0]]==possible_path) //If you can go North, position is moved

				pos[1]-=1;

			else

				dir='E';

			break;

		case 'E':

			if (path[pos[1]][pos[0]+1]==possible_path) //If you can go East, position is moved

				pos[0]+=1;

			else

				dir='S';

			break;

		case 'S':

			if (path[pos[1]+1][pos[0]]==possible_path) //If you can go South, position is moved

				pos[1]+=1;

			else

				dir='W';

			break;

		case 'W':

			if (path[pos[1]][pos[0]-1]==possible_path) //If you can go West, position is moved

				pos[0]-=1;

			else

				dir='N';

			break;

	}

	//If we ger back to multiple valid moves (intersection), exit

	if (validMove(path,pos)==2)

		return 0;

	path[pos[1]][pos[0]] = open_path; //Resets each 'possible_path' with a 'open_path'

	backtrack(path,pos,dir);	//recursive call

}

/*

	Objective: The Objective of the coordsAreEdge function is to return

		True if a given x,y coordinate corresponds to the edge of a given

		maze (meaning you have reached the end) or return False otherwize

	Input: Input of this function is a 1D int array called pos[]

		int pos[]

			-> A 1D int array representing the current x,y position in the maze

	Output: The Output of this function is a booleon True or False depentent

			on whether the current position is at the edge or not via return 0 or return 1; 

	

*/

int coordsAreEdge(int pos[])

{

	if ((pos[1]==maze_r-1)||(pos[0]==maze_c-1))

		return 1;

	return 0;

}

/*

	Objective: The Objective of the printMaze function is to print

		a given 2D char array as well as accept a keystrock via a

		getchar() statement in order to pause the program following

		each print.

	Input: Input of this function is a maze_r by maze_c char array (2D)

			The other input is the getchar() function which accepts a keystroke

		char maze[maze_r][maze_c]

			-> A 2D charecter array which represents the maze being solved

		getchar()

			-> this will pause the program awaiting the user to hit enter on the keyboard

	Output: The Output of this function is the maze array printed in a 

			proper format into the console. 

		char maze[maze_r][maze_c]

			-> A 2D charecter array which represents the maze being solved

*/

void printMaze(char maze[maze_r][maze_c])

{

	int r,c;

	//Prints the maze

	for (r=0;r<maze_r;r++)

	{

		printf("\t");

		for (c=0;c<maze_c;c++)

		{

			printf("%c ",maze[r][c]);

		}

		printf("\n");

	}

	printf("\nHit return to continue: ");

	getchar();

	printf("\n");

}fontana1@charlie:~$ cat inp[K[K[K[K[K[K[Kcc assign2.c

fontana1@charlie:~$ ./a.out



Welcome to Maze Traversal: Assignment 2



Tip:

	'1' = Wall     

	'0' = Open Path 

	'X' = Your Location   



Maze Solution:

	1 1 1 1 1 1 1 1 1 1 1 1 

	1 X X X 1 X X X X X X 1 

	X X 1 X 1 X 1 1 1 1 X 1 

	1 1 1 X 1 X X X X 1 X 1 

	1 0 0 X X 1 1 1 X 1 X X 

	1 1 1 1 X 1 0 1 X 1 0 1 

	1 0 0 1 X 1 0 1 X 1 0 1 

	1 1 0 1 X 1 0 1 X 1 0 1 

	1 0 0 0 X X X X X 1 0 1 

	1 1 1 1 1 1 0 1 1 1 0 1 

	1 0 0 0 0 0 0 1 0 0 0 1 

	1 1 1 1 1 1 1 1 1 1 1 1 



Hit return to continue: 



fontana1@charlie:~$ L[Kls -l

total 150

-rwxr-xr-x 1 fontana1 temp 11602 Feb 15 18:20 [0m[01;32ma.out[0m

-rw-r--r-- 1 fontana1 temp  8744 Jan 31 11:34 assign1.txt

-rw-r--r-- 1 fontana1 temp 12062 Feb 15 18:17 assign2.c

-rw-r--r-- 1 fontana1 temp 25088 Feb 15 18:21 assign2.txt

drwxr-xr-x 4 fontana1 temp    53 Jan 21 18:57 [01;34mCS[0m

drwxr-xr-x 2 fontana1 temp     2 Sep 11 16:11 [01;34mDesktop[0m

drwxr-xr-x 2 fontana1 temp     2 Sep 11 16:11 [01;34mDocuments[0m

drwxr-xr-x 2 fontana1 temp     3 Sep 25 11:10 [01;34mDownloads[0m

-rw-r--r-- 1 fontana1 temp  3407 Feb 14 15:24 I2.c

-rw-r--r-- 1 fontana1 temp     0 Feb  4 19:53 I2.c~

-rw-r--r-- 1 fontana1 temp 12062 Feb 15 18:17 I2n.c

-rw-r--r-- 1 fontana1 temp  1593 Jan 30 17:34 IA1 (2).c

-rw-r--r-- 1 fontana1 temp  6148 Jan 31 11:33 IA12.c

-rw-r--r-- 1 fontana1 temp  1595 Jan 30 12:36 IA1.c

-rw-r--r-- 1 fontana1 temp   710 Jan 28 19:19 IA1.c~

-rw-r--r-- 1 fontana1 temp  1629 Jan 20 14:15 IA2.c~

-rw-r--r-- 1 fontana1 temp  1446 Jan 30 17:31 i.c

-rw-r--r-- 1 fontana1 temp    10 Jan 31 11:12 input.txt

-rw-r--r-- 1 fontana1 temp     3 Jan 28 19:12 input.txt~

-rw-r--r-- 1 fontana1 temp  4501 Feb  4 19:50 l3.c

-rw-r--r-- 1 fontana1 temp  4527 Feb  4 19:49 l3.c~

-rw-r--r-- 1 fontana1 temp   346 Feb 10 14:28 L4.c

-rw-r--r-- 1 fontana1 temp  4729 Jan 28 19:51 lab1.c

-rw-r--r-- 1 fontana1 temp  4728 Jan 28 19:51 lab1.c~

-rw-r--r-- 1 fontana1 temp  4500 Jan 28 19:48 lab2.c

-rw-r--r-- 1 fontana1 temp  4461 Jan 28 19:07 lab2.c~

-rw-r--r-- 1 fontana1 temp  3224 Feb  2 22:40 lab3.c

-rw-r--r-- 1 fontana1 temp  2029 Feb 11 19:22 lab4.c

-rw-r--r-- 1 fontana1 temp  2029 Feb 11 19:22 lab4.c~

-rw-r--r-- 1 fontana1 temp   926 Feb 11 12:17 lI3.c

drwxr-xr-x 2 fontana1 temp     2 Sep 11 16:11 [01;34mMusic[0m

-rw-r--r-- 1 fontana1 temp  1203 Feb 14 13:20 n.c

drwxr-xr-x 2 fontana1 temp     2 Sep 11 16:11 [01;34mPictures[0m

drwxr-xr-x 2 fontana1 temp     2 Sep 11 16:11 [01;34mPublic[0m

drwxr-xr-x 2 fontana1 temp     2 Sep 11 16:11 [01;34mTemplates[0m

drwxr-xr-x 2 fontana1 temp     4 Sep  9 15:14 [01;34mTest[0m

-rw-r--r-- 1 fontana1 temp  1602 Jan 31 10:33 test.c

-rw-r--r-- 1 fontana1 temp    50 Sep 11 16:20 test.m~

-rw-r--r-- 1 fontana1 temp   645 Feb 11 19:13 trace.c

drwxr-xr-x 2 fontana1 temp     2 Sep 11 16:11 [01;34mVideos[0m

fontana1@charlie:~$ exit

exit


Script done on Sun 15 Feb 2015 06:21:13 PM EST
